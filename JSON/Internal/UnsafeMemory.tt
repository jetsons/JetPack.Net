<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var Max = 31;
#>
#if NETSTANDARD

using System.Runtime.CompilerServices;

namespace Jetsons.JSON.Internal
{
    public static partial class UnsafeMemory32
    {
<# for(var i = 4; i <= Max; i++) { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void WriteRaw<#= i #>(ref JsonWriter writer, byte[] src)
        {
            BinaryUtil.EnsureCapacity(ref writer.buffer, writer.offset, src.Length);

            fixed (byte* pSrc = &src[0])
            fixed (byte* pDst = &writer.buffer[writer.offset])
            {
<# for(var j = 0; j < (i / 4); j++) { #>
                *(int*)(pDst + <#= (4 * j) #>) = *(int*)(pSrc + <#= (4 * j) #>);
<# } #>
<# if(i % 4 != 0) { #>
                *(int*)(pDst + <#= i - 4 #>) = *(int*)(pSrc + <#= (i - 4) #>);
<# } #>
            }

            writer.offset += src.Length;
        }

<# } #>
    }

    public static partial class UnsafeMemory64
    {
<# for(var i = 8; i <= Max; i++) { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void WriteRaw<#= i #>(ref JsonWriter writer, byte[] src)
        {
            BinaryUtil.EnsureCapacity(ref writer.buffer, writer.offset, src.Length);

            fixed (byte* pSrc = &src[0])
            fixed (byte* pDst = &writer.buffer[writer.offset])
            {
<# for(var j = 0; j < (i / 8); j++) { #>
                *(long*)(pDst + <#= (8 * j) #>) = *(long*)(pSrc + <#= (8 * j) #>);
<# } #>
<# if(i % 8 != 0) { #>
                *(long*)(pDst + <#= i - 8 #>) = *(long*)(pSrc + <#= (i - 8) #>);
<# } #>
            }

            writer.offset += src.Length;
        }

<# } #>
    }
}

#endif