<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

    var types = new[]
    {
        Tuple.Create(typeof(Int16), 2),
        Tuple.Create(typeof(Int32), 4),
        Tuple.Create(typeof(Int64), 8),
        Tuple.Create(typeof(UInt16), 2),
        Tuple.Create(typeof(UInt32), 4),
        Tuple.Create(typeof(UInt64), 8),
        Tuple.Create(typeof(Single), 4),
        Tuple.Create(typeof(Double), 8),
        Tuple.Create(typeof(bool), 1),
        Tuple.Create(typeof(byte), 1),
        Tuple.Create(typeof(sbyte), 1),
        Tuple.Create(typeof(char), 2),
        Tuple.Create(typeof(decimal), 16),
        Tuple.Create(typeof(Guid), 16),
        Tuple.Create(typeof(TimeSpan), 12),
        Tuple.Create(typeof(DateTime), 12),
    };

#>
using System;
using Jetsons.ZFO.Internal;

namespace Jetsons.ZFO.Formatters
{
    // Layout: [fixedElementSize]
    // Layout: [hasValue:1][fixedElementSize]

<# foreach(var tuple in types) { var t = tuple.Item1; #>

    internal class <#= t.Name #>Formatter<TTypeResolver> : Formatter<TTypeResolver, <#= t.Name #>>
        where TTypeResolver : ITypeResolver, new()
    {
        public override bool NoUseDirtyTracker
        {
            get
            {
                return true;
            }
        }

        public override int? GetLength()
        {
            return <#= tuple.Item2 #>;
        }

        public override int Serialize(ref byte[] bytes, int offset, <#= t.Name #> value)
        {
            return BinaryUtil.Write<#= t.Name #>(ref bytes, offset, value);
        }

        public override <#= t.Name #> Deserialize(ref byte[] bytes, int offset, DirtyTracker tracker, out int byteSize)
        {
            byteSize = <#= tuple.Item2 #>;
            return BinaryUtil.Read<#= t.Name #>(ref bytes, offset);
        }
    }

    internal class Nullable<#= t.Name #>Formatter<TTypeResolver> : Formatter<TTypeResolver, <#= t.Name #>?>
        where TTypeResolver : ITypeResolver, new()
    {
        public override bool NoUseDirtyTracker
        {
            get
            {
                return true;
            }
        }

        public override int? GetLength()
        {
            return <#= tuple.Item2 + 1 #>;
        }

        public override int Serialize(ref byte[] bytes, int offset, <#= t.Name #>? value)
        {
            BinaryUtil.EnsureCapacity(ref bytes, offset, <#= tuple.Item2 + 1 #>);
            if (value.HasValue)
            {
                BinaryUtil.WriteBooleanTrueUnsafe(ref bytes, offset);
                BinaryUtil.Write<#= t.Name #>(ref bytes, offset + 1, value.Value);
            }
            else
            {
                BinaryUtil.WriteBooleanFalseUnsafe(ref bytes, offset);
            }

            return <#= tuple.Item2 + 1 #>;
        }

        public override <#= t.Name #>? Deserialize(ref byte[] bytes, int offset, DirtyTracker tracker, out int byteSize)
        {
            byteSize = <#= tuple.Item2 + 1 #>;

            var hasValue = BinaryUtil.ReadBoolean(ref bytes, offset);
            if (!hasValue) return default(<#= t.Name #>?);

            return BinaryUtil.Read<#= t.Name #>(ref bytes, offset + 1);
        }
    }

<# } #>

}