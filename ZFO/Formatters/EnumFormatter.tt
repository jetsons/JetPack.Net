<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

    var types = new[]
    {
        Tuple.Create(typeof(Int16), 2),
        Tuple.Create(typeof(Int32), 4),
        Tuple.Create(typeof(Int64), 8),
        Tuple.Create(typeof(UInt16), 2),
        Tuple.Create(typeof(UInt32), 4),
        Tuple.Create(typeof(UInt64), 8),
        Tuple.Create(typeof(byte), 1),
        Tuple.Create(typeof(sbyte), 1),
    };

#>
#if !UNITY
using System;
using System.Reflection;
using Jetsons.ZFO.Internal;
using Jetsons.ZFO.Segments;

namespace Jetsons.ZFO.Formatters
{
    // Layout: [fixedElementSize]
    // Layout: [hasValue:1][fixedElementSize]

<# foreach(var tuple in types) { var t = tuple.Item1; #>

    [Preserve(AllMembers = true)]
    internal class <#= t.Name #>EnumFormatter<TTypeResolver, T> : Formatter<TTypeResolver, T>
        where TTypeResolver : ITypeResolver, new()
    {
        static <#= t.Name #> Identity(<#= t.Name #> x) { return x; }

        readonly Func<<#= t.Name #>, T> deserializeCast;
        readonly Func<T, <#= t.Name #>> serializeCast;

        [Preserve]
        public <#= t.Name #>EnumFormatter()
        {
            Func<<#= t.Name #>, <#= t.Name #>> identity = Identity;
            this.serializeCast = identity.GetMethodInfo().CreateDelegate(typeof(Func<T, <#= t.Name #>>)) as Func<T, <#= t.Name #>>;
            this.deserializeCast = identity.GetMethodInfo().CreateDelegate(typeof(Func<<#= t.Name #>, T>)) as Func<<#= t.Name #>, T>;
        }

        public override bool NoUseDirtyTracker
        {
            get
            {
                return true;
            }
        }

        public override int? GetLength()
        {
            return <#= tuple.Item2 #>;
        }

        public override int Serialize(ref byte[] bytes, int offset, T value)
        {
            return BinaryUtil.Write<#= t.Name #>(ref bytes, offset, serializeCast(value));
        }

        public override T Deserialize(ref byte[] bytes, int offset, DirtyTracker tracker, out int byteSize)
        {
            byteSize = <#= tuple.Item2 #>;
            return deserializeCast(BinaryUtil.Read<#= t.Name #>(ref bytes, offset));
        }
    }

    [Preserve(AllMembers = true)]
    internal class Nullable<#= t.Name #>EnumFormatter<TTypeResolver, T> : Formatter<TTypeResolver, T?>
        where T : struct
        where TTypeResolver : ITypeResolver, new()
    {
        static <#= t.Name #> Identity(<#= t.Name #> x) { return x; }

        readonly Func<<#= t.Name #>, T> deserializeCast;
        readonly Func<T, <#= t.Name #>> serializeCast;

        [Preserve]
        public Nullable<#= t.Name #>EnumFormatter()
        {
            Func<<#= t.Name #>, <#= t.Name #>> identity = Identity;
            this.serializeCast = identity.GetMethodInfo().CreateDelegate(typeof(Func<T, <#= t.Name #>>)) as Func<T, <#= t.Name #>>;
            this.deserializeCast = identity.GetMethodInfo().CreateDelegate(typeof(Func<<#= t.Name #>, T>)) as Func<<#= t.Name #>, T>;
        }

        public override bool NoUseDirtyTracker
        {
            get
            {
                return true;
            }
        }

        public override int? GetLength()
        {
            return <#= tuple.Item2 + 1 #>;
        }

        public override int Serialize(ref byte[] bytes, int offset, T? value)
        {
            BinaryUtil.EnsureCapacity(ref bytes, offset, offset + <#= tuple.Item2 + 1 #>);
            if (value.HasValue)
            {
                BinaryUtil.WriteBooleanTrueUnsafe(ref bytes, offset);
                BinaryUtil.Write<#= t.Name #>(ref bytes, offset + 1, serializeCast(value.Value));
            }
            else
            {
                BinaryUtil.WriteBooleanFalseUnsafe(ref bytes, offset);
            }

            return <#= tuple.Item2 + 1 #>;
        }

        public override T? Deserialize(ref byte[] bytes, int offset, DirtyTracker tracker, out int byteSize)
        {
            byteSize = <#= tuple.Item2 + 1 #>;
            var hasValue = BinaryUtil.ReadBoolean(ref bytes, offset);
            if (!hasValue) return null;

            return deserializeCast(BinaryUtil.Read<#= t.Name #>(ref bytes, offset + 1));
        }
    }

<# } #>

}

#endif